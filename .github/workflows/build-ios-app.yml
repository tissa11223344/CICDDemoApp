#name: Build iOS application CICD
#
#on:
#  push:
#    paths:
#      - .github/workflows/build-ios-app.yml
#
#jobs:
#  build_with_signing:
#    runs-on: macos-latest
#    steps:
#      - name: Check Xcode version
#        run: |
#          xcode_version=$(xcodebuild -version | grep "Xcode")
#          if [[ "$xcode_version" =~ "Xcode 13" || "$xcode_version" =~ "Xcode 14" ]]; then
#            echo "Xcode version is compatible: $xcode_version"
#          else
#            echo "Error: Xcode version $xcode_version is not supported. Please use Xcode 13 or above."
#            exit 1
#          fi
#
#      - name: Decode export options plist
#        run: |
#          echo "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode > export_options.plist
#
#      - name: Test secret value 
#        run: echo "${{ secrets.EXPORT_OPTIONS_PLIST }}"
#
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Install CocoaPods dependencies
#        run: |
#          gem install cocoapods
#          pod install
#
#      - name: Install Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # Create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # Import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#          # Create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # Import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # Apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - name: Build archive
#        run: |
#          xcodebuild -workspace "CICDDemoApp.xcworkspace" \
#          -scheme "CICDDemoApp" \
#          -archivePath $RUNNER_TEMP/CICDDemoApp.xcarchive \
#          -sdk iphonesimulator \
#          -configuration Debug \
#          clean archive \
#          -allowProvisioningUpdates
#
#      - name: Export IPA
#        env:
#          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#        run: |
#          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/CICDDemoApp.xcarchive \
#          -exportOptionsPlist $EXPORT_OPTS_PATH \
#          -exportPath $RUNNER_TEMP/build
#
#      - name: Move build to release folder
#        run: mv $RUNNER_TEMP/build/CICDDemoApp.ipa $GITHUB_WORKSPACE/release
#
#      - name: Upload build to release folder
#        uses: actions/upload-release-asset@v1
#        with:
#          asset_path: $GITHUB_WORKSPACE/release/CICDDemoApp.ipa
#          name: CICDDemoApp.ipa
#          upload_url: ${{ github.event.release.upload_url }}
#          # Add any other options as needed






#
#name: Build iOS app file
#
#on:
#  push:
#    paths:
#      - .github/workflows/build-ios-app.yml
#
#jobs:
#  build_with_signing:
#    runs-on: macos-latest
#    steps:
#      - name: Check Xcode version
#        run: |
#          xcode_version=$(xcodebuild -version | grep "Xcode")
#          if [[ "$xcode_version" =~ "Xcode 13" || "$xcode_version" =~ "Xcode 14" ]]; then
#            echo "Xcode version is compatible: $xcode_version"
#          else
#            echo "Error: Xcode version $xcode_version is not supported. Please use Xcode 13 or above."
#            exit 1
#          fi
#
#      - name: Decode export options plist
#        run: |
#          echo "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode > export_options.plist
#
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Install CocoaPods dependencies
#        run: |
#          gem install cocoapods
#          pod install
#
#      - name: Install Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # Create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # Import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#          # Create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # Import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # Apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - name: Generate and archive
#        run: |
#          xcodebuild -workspace "CICDDemoApp.xcworkspace" \
#          -scheme "CICDDemoApp" \
#          -configuration Debug \
#          -archivePath $RUNNER_TEMP/CICDDemoApp.xcarchive \
#          clean archive \
#          -allowProvisioningUpdates
#
#          # Export IPA
#          echo "Runner temp path: $RUNNER_TEMP"
#          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/CICDDemoApp.xcarchive \
#          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
#          -exportPath $RUNNER_TEMP/build
#          echo "Runner temp path1: $RUNNER_TEMP"
#
#          # Move IPA to workspace
#          mv $RUNNER_TEMP/build/CICDDemoApp.ipa $GITHUB_WORKSPACE
#
#      - name: Upload IPA as artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: CICDDemoApp
#          path: $GITHUB_WORKSPACE/CICDDemoApp.ipa





name: Build iOS app

on:
  push:
    paths:
      - .github/workflows/build-ios-app.yml

jobs:
  build_and_export_ipa:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          pod install

      - name: Build and export IPA
        run: |
          xcodebuild -workspace "CICDDemoApp.xcworkspace" \
          -scheme "CICDDemoApp" \
          -configuration Debug \
          -archivePath $HOME/build/CICDDemoApp.xcarchive \
          clean archive \
          -allowProvisioningUpdates

          # Export IPA
          xcodebuild -exportArchive -archivePath $HOME/build/CICDDemoApp.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $HOME/build

          # Move IPA to workspace
          mv $HOME/build/CICDDemoApp.ipa $GITHUB_WORKSPACE

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v2
        with:
          name: CICDDemoApp
          path: $GITHUB_WORKSPACE/CICDDemoApp.ipa
